// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeviceType {
  notebook
  smartphone
  tablet
  desktop
  other

  @@map("device_type")
}

enum ServiceOrderStatus {
  open
  inProgress
  completed
  canceled

  @@map("service_order_status")
}

enum ServiceOrderItemStatus {
  pending
  executing
  completed

  @@map("service_order_item_status")
}

enum PaymentMethod {
  cash
  creditCard
  debitCard
  pix
  boleto

  @@map("payment_method")
}

enum BillStatus {
  pending
  paid
  overdue

  @@map("bill_status")
}

model Customer {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(150)
  phone         String?        @db.VarChar(20)
  email         String?        @db.VarChar(255)
  createdAt     DateTime       @default(now())
  addresses     Address[]
  equipment     Equipment[]
  serviceOrders ServiceOrder[]

  @@map("customer")
}

model Address {
  id           Int      @id @default(autoincrement())
  complement   String?  @db.VarChar(255)
  street       String?  @db.VarChar(150)
  neighborhood String?  @db.VarChar(150)
  city         String?  @db.VarChar(100)
  state        String?  @db.VarChar(2)
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   Int

  @@map("address")
}

model Equipment {
  id                Int                @id @default(autoincrement())
  deviceType        DeviceType
  brand             String?            @db.VarChar(50)
  model             String?            @db.VarChar(150)
  serialNumber      String?            @db.VarChar(255)
  createdAt         DateTime           @default(now())
  customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId        Int
  serviceOrderItems ServiceOrderItem[]

  @@map("equipment")
}

model ServiceOrder {
  id          Int                @id @default(autoincrement())
  description String?            @db.Text
  status      ServiceOrderStatus @default(open)
  estimate    Decimal?           @db.Decimal(10, 2)
  createdAt   DateTime           @default(now())
  customer    Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  Int
  items       ServiceOrderItem[]
  bill        Bill?

  @@map("service_order")
}

model ServiceOrderItem {
  id             Int                    @id @default(autoincrement())
  description    String?                @db.Text
  status         ServiceOrderItemStatus @default(pending)
  equipment      Equipment?             @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  equipmentId    Int?
  serviceOrder   ServiceOrder           @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  serviceOrderId Int

  @@map("service_order_item")
}

model Bill {
  id             Int           @id @default(autoincrement())
  amount         Decimal       @db.Decimal(10, 2)
  paymentMethod  PaymentMethod
  dueDate        DateTime
  status         BillStatus    @default(pending)
  serviceOrder   ServiceOrder  @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  serviceOrderId Int           @unique

  @@map("bill")
}
